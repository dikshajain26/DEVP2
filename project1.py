# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12iMUe0BpeWFeBY_ISVRUqPkvTaSiynm1
"""

# Install the required library
!pip install pandas bar_chart_race

pip install pandas matplotlib

pip install plotly --upgrade

import numpy as np
import pandas as pd
import bar_chart_race as bcr
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import plotly.express as px

df = pd.read_excel("/content/Adidas.xlsx")
df.head()

# Assuming "InvoiceDate" is the name of your date column
df["Year"] = df["InvoiceDate"].dt.year

# Group by 'InvoiceDate' and 'Year' columns and calculate the sum of 'UnitsSold'
grouped_data = df.groupby(['Year','InvoiceDate'])['UnitsSold'].sum().reset_index()

fig = px.line(grouped_data, x='InvoiceDate', y='UnitsSold',
              animation_frame='Year', title='Line chart of Date vs Units Sold',
              height=1200)

fig.show()

import plotly.express as px
import pandas as pd

# Assuming your DataFrame is named df
# Bar plot for Views per Year for 2021
fig_views_2021 = px.bar(df[df['Year'] == 2021], x='TotalSales', y='InvoiceDate', animation_frame='Year',
                        title='Distribution of Sales in 2021',
                        labels={'TotalSales': 'Sales', 'Year': 'year'})
fig_views_2021.update_layout(showlegend=False)
fig_views_2021.show()

import plotly.express as px
import pandas as pd

# Assuming your DataFrame is named df and has 'Year', 'InvoiceDate', and 'TotalSales' columns

# Create a bubble chart
fig_bubble_chart = px.scatter(df, x='Year', y='InvoiceDate', size='TotalSales',
                              title='Bubble Chart: Year vs. sales (Bubble Size: Total Sales)',
                              labels={'TotalSales': 'Total Sales', 'InvoiceDate': 'Date'},
                              color='TotalSales')
fig_bubble_chart.show()

import plotly.express as px
import pandas as pd

# Assuming your DataFrame is named df and has 'InvoiceDate ', 'TotalSales', and 'Year' columns

# Create an animated scatter plot
fig_scatter_animated = px.scatter(df, x='InvoiceDate', y='TotalSales', animation_frame='Year',
                                  title='Animated Scatter Plot: Total Sales vs. InvoiceDate Over Time',
                                  labels={'TotalSales': 'Total Sales', 'InvoiceDate': 'InvoiceDate'},
                                  color='TotalSales', size_max=60)
fig_scatter_animated.show()